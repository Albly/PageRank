import numpy as np

def power_iteration(A, num_simulations: int):
    # Ideally choose a random vector
    # To decrease the chance that our vector
    # Is orthogonal to the eigenvector
    b_k = np.random.rand(A.shape[1])

    for i in range(num_simulations):
        # calculate the matrix-by-vector product Ab
        b_k1 = np.dot(A, b_k)

        # calculate the norm
        b_k1_norm = np.linalg.norm(b_k1)

        # re normalize the vector
        new_bk = b_k1 / b_k1_norm 
        
        if np.linalg.norm(b_k - new_bk) < 0.01:
            print(i, 'iteration, finished')
            return new_bk
        b_k = new_bk 
    
    return b_k
